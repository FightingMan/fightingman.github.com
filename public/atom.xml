<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[FightingMan's FootPrints]]></title>
  <link href="http://FightingMan.github.com/atom.xml" rel="self"/>
  <link href="http://FightingMan.github.com/"/>
  <updated>2013-10-22T11:58:50+08:00</updated>
  <id>http://FightingMan.github.com/</id>
  <author>
    <name><![CDATA[FightingMan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A trap in php base_convert]]></title>
    <link href="http://FightingMan.github.com/blog/2013/10/22/a-trap-in-php-base-convert/"/>
    <updated>2013-10-22T01:37:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2013/10/22/a-trap-in-php-base-convert</id>
    <content type="html"><![CDATA[<p>Today I find an interesting thing: a php function <a href="http://us1.php.net/manual/en/function.base-convert.php">base_convert</a></p>

<figure class='code'><figcaption><span>convert.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$a = 0x80;</span>
</span><span class='line'><span class="x">var_dump(base_convert($a, 16, 2));</span>
</span></code></pre></td></tr></table></div></figure>


<p>No surprises:</p>

<pre><code>string(9) "100101000"
</code></pre>

<p>Let&#8217;s go on!</p>

<figure class='code'><figcaption><span>convert.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$a = 0x80;</span>
</span><span class='line'><span class="x">var_dump(base_convert($a, 16, 2));</span>
</span><span class='line'><span class="x">$b = ~$a;</span>
</span><span class='line'><span class="x">var_dump(base_convert($b, 16, 2), $b);</span>
</span></code></pre></td></tr></table></div></figure>


<p>output:</p>

<pre><code>string(9) "100101000"
string(9) "100101001"
int(-129)
</code></pre>

<p>Hmm,it seems strange that binary <em><strong>100101001</strong></em> not equas decimal <em><strong>-129</strong></em>, but the result: -129 is the right answer,what happened?</p>

<!--more-->


<p>Then I reading the source code of this function <a href="https://github.com/php/php-src/blob/master/ext/standard/math.c#L1065">base_convert</a> The Unscientific-real function is <a href="https://github.com/php/php-src/blob/master/ext/standard/math.c#L839">_php_math_basetozval</a></p>

<figure class='code'><figcaption><span>math.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">Z_STRLEN_P</span><span class="p">(</span><span class="n">arg</span><span class="p">);</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">c</span> <span class="o">=</span> <span class="o">*</span><span class="n">s</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* might not work for EBCDIC */</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="n">c</span> <span class="o">-=</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="sc">&#39;Z&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="n">c</span> <span class="o">-=</span> <span class="sc">&#39;A&#39;</span> <span class="o">-</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="sc">&#39;a&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="sc">&#39;z&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="n">c</span> <span class="o">-=</span> <span class="sc">&#39;a&#39;</span> <span class="o">-</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span> <span class="c1">//Evil continue...</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="n">base</span><span class="p">)</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">switch</span> <span class="p">(</span><span class="n">mode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span>: <span class="cm">/* Integer */</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="n">cutoff</span> <span class="o">||</span> <span class="p">(</span><span class="n">num</span> <span class="o">==</span> <span class="n">cutoff</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="n">cutlim</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">num</span> <span class="o">=</span> <span class="n">num</span> <span class="o">*</span> <span class="n">base</span> <span class="o">+</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">fnum</span> <span class="o">=</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>              <span class="n">mode</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="cm">/* fall-through */</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1</span>: <span class="cm">/* Float */</span>
</span><span class='line'>          <span class="n">fnum</span> <span class="o">=</span> <span class="n">fnum</span> <span class="o">*</span> <span class="n">base</span> <span class="o">+</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>    
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Read here do not complain: God is Fair.
Another PHP functions can help us solve this problem:printf or sprintf.</p>

<p>if you realy want to see the binary of <em><em>-129</em></em>, please use these functions like this:</p>

<figure class='code'><figcaption><span>convert.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">$a = 0x80;</span>
</span><span class='line'><span class="x">var_dump(base_convert($a, 16, 2));</span>
</span><span class='line'><span class="x">$b = ~$a;</span>
</span><span class='line'><span class="x">var_dump(base_convert($b, 16, 2), $b);</span>
</span><span class='line'><span class="x">printf(&quot;%b&quot;, $b);</span>
</span><span class='line'><span class="x">echo &quot;\n&quot;;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please verify the conclusion by yourself :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell Tips with Ctrl+(?)]]></title>
    <link href="http://FightingMan.github.com/blog/2013/03/13/shell-tips-with-ctrl-plus/"/>
    <updated>2013-03-13T23:59:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2013/03/13/shell-tips-with-ctrl-plus</id>
    <content type="html"><![CDATA[<p>There are some handy operator with command line:</p>

<pre><code>[Ctrl-d] #This exits shell or closes input on programs waiting for STDIN.NOTE: there must be no such thing as an end of file character.
[Ctrl-z] #This suspend a process u r running in foreground. Get it back by running 'fg', background it using 'bg'.
[Ctrl-c] #This canceling a running program,Ctrl-C can be used before you run cammand to "cancel" the line edit and start anew.
[Ctrl-b] #Move to the begging of the current or previous word. NOTE: base on keyboard mapping sometimes.
[Ctrl-f] #Move to the end of the current or next word. NOTE: base on keyboard mapping sometimes.
[Ctrl-w] #Remove the previous word.
[Ctrl-l] #Clear screen.
[Ctrl-K] #Delete/Yank everything from cursor to the end of line.
[Ctrl-U] #Delete/Yank everything from cursor to the begging of the line.
[Ctrl-e] #Move your cursor to the end of the line.
[Ctrl-a] #move your cursor to the begging of the line.
[Ctrl-r] #Reverse search through your command history for 'input'. ESC when done.
[Ctrl--] #Manial lists this as Ctrl-_ but Ctrl-- ususally works too.Incremental undo of command line edits.
</code></pre>

<p>Look forward to your supplementary :).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My girl friend]]></title>
    <link href="http://FightingMan.github.com/blog/2012/12/24/my-girl-friend/"/>
    <updated>2012-12-24T22:07:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/12/24/my-girl-friend</id>
    <content type="html"><![CDATA[<p>I pursued a girl for six years whose name is Rever the most beautiful girl in the world.</p>

<p>In Dec. 22, We fell in love :).</p>

<p>Thanks to Mayans that they can only help me so much,if without their help I think I&#8217;ll lose myself.</p>

<p>I&#8217;m not good at talking and writting,but you must know Rever you&#8217;er my only princess all the time,I&#8217;ll guard you to the old.</p>

<p>I&#8217;ll realizing all your dreams,you must be the happiest girl in the world.</p>

<p>Other words,now we&#8217;er not together in the same place,wait and give me some time,I&#8217;m standing by my words,the line must be fruit.</p>

<p>Anyway,I feel I&#8217;m the happiest man in these days,miss you Rever,I think I&#8217;m so lucky.</p>

<!--more-->


<p><img src="http://FightingMan.github.com/images/rever2.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Interesting Thing Occurs While a Class Inside Interface]]></title>
    <link href="http://FightingMan.github.com/blog/2012/12/08/an-interesting-thing-occurs-while-a-class-inside-interface/"/>
    <updated>2012-12-08T22:08:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/12/08/an-interesting-thing-occurs-while-a-class-inside-interface</id>
    <content type="html"><![CDATA[<p>While I’m putting class inside interface with anonymous,something interested occurs.</p>

<figure class='code'><figcaption><span>As21.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">Comm</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">class</span> <span class="nc">Inner</span> <span class="kd">implements</span> <span class="n">Comm</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">static</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">(</span><span class="n">Comm</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">c</span><span class="o">.</span><span class="na">v</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">v</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">v</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">Diff</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">class</span> <span class="nc">Differ</span> <span class="kd">implements</span> <span class="n">Comm</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">static</span> <span class="kt">void</span> <span class="nf">g</span><span class="o">(</span><span class="n">Comm</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">c</span><span class="o">.</span><span class="na">v</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">v</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">As21</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Comm</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Comm</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">v</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;as21&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>        <span class="n">Comm</span><span class="o">.</span><span class="na">Inner</span><span class="o">.</span><span class="na">f</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">As22</span> <span class="kd">implements</span> <span class="n">Comm</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">v</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;as22&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">As22</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">As22</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Inner</span><span class="o">.</span><span class="na">f</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Diff</span><span class="o">.</span><span class="na">Differ</span><span class="o">.</span><span class="na">g</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see,As21 is the one which I wantted,but the interesting thing occurs in As22. First,any class you put inside an interface is automatically public and static. Then As22 implements the Comm interface so it can call f() method directly with using Inner.f() witout Comm in front of it, but the method f() in Diff interface cannot called directly,must use Diff.differ.f().</p>

<p>In addition,how to execute the program in command line while put classes inside interfaces?</p>

<p>e.g.</p>

<figure class='code'><figcaption><span>As20.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">As20</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">class</span> <span class="nc">Inner</span> <span class="kd">implements</span> <span class="n">As20</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;test&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Inner</span> <span class="n">i</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Inner</span><span class="o">();</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>javac As20.java</p>

<p>java As20\$Inner</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connect to postgresql via msfconsole in Metasploit]]></title>
    <link href="http://FightingMan.github.com/blog/2012/12/04/connect-to-postgresql-via-msfconsole-in-metasploit/"/>
    <updated>2012-12-04T18:52:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/12/04/connect-to-postgresql-via-msfconsole-in-metasploit</id>
    <content type="html"><![CDATA[<p>Today I&#8217;m testing metasploit in bt5,there is a problem takes me some time,yes,this is a bug,show these codes:</p>

<pre><code>root@bt:~# cd /opt/metasploit/
root@bt:/opt/metasploit# cat config/database.yml 
    development:
    adapter: "postgresql"
    database: "msf3dev"
    username: "msf3"
    password: "4bfedfc2"
    port: 7337
    host: "localhost"
    pool: 256
    timeout: 5

    production:
    adapter: "postgresql"
    database: "msf3dev"
    username: "msf3"
    password: "4bfedfc2"
    port: 7337
    host: "localhost"
    pool: 256
    timeout: 5
root@bt:/opt/metasploit# netstat -tunpl | grep postgres
tcp        0      0 127.0.0.1:7337          0.0.0.0:*               LISTEN      1321/postgres.bin
tcp6       0      0 ::1:7337                :::*                    LISTEN      1321/postgres.bin
root@bt:/opt/metasploit# cd msf3
root@bt:/opt/metasploit/msf3# ./msfconsole

# cowsay++
 ____________
&lt; metasploit &gt;
 ------------
       \   ,__,
        \  (oo)____
           (__)    )\
              ||--|| *


       =[ metasploit v4.5.0-dev [core:4.5 api:1.0]
+ -- --=[ 927 exploits - 499 auxiliary - 151 post
+ -- --=[ 251 payloads - 28 encoders - 8 nops

msf &gt; db_connect msf3:4bfedfc2@localhost:7337/msf3dev
      [-] No database driver installed. Try 'gem install pg'
</code></pre>

<p>msf3 is the username in database.yml;
4bfedfc2 is the password in database.yml;
msf3dev is the database in database.yml;
and the 7337 is the port for postgresql.</p>

<!--more-->


<pre><code>msf &gt; find / -iname pg_config
[*] exec: find / -iname pg_config

/opt/metasploit/postgresql/bin/pg_config
msf &gt; gem install pg -- --with-pg-config=/opt/metasploit/postgresql/bin/pg_config
[*] exec: gem install pg -- --with-pg-config=/opt/metasploit/postgresql/bin/pg_config

Building native extensions.  This could take a while...
Successfully installed pg-0.14.1
1 gem installed
Installing ri documentation for pg-0.14.1...
Installing RDoc documentation for pg-0.14.1...
msf &gt; db_connect msf3:4bfedfc2@localhost:7337/msf3dev
    [-] No database driver installed. Try 'gem install pg'//also
</code></pre>

<p>At last I&#8217;ve found out that the problem is related to the installed ruby version.
The start script of msfconsole uses /usr/bin/env ruby as Parser.
But metasploit seems to have an own version of ruby which you can use by changing msfconsole.
you can test it by yourself:</p>

<pre><code>root@bt:/opt/metasploit/msf3# /opt/metasploit/ruby/bin/ruby -v
ruby 1.9.3p125 (2012-02-16 revision 34643) [i686-linux]
root@bt:/opt/metasploit/msf3# /usr/bin/ruby -v
ruby 1.9.2dev (2010-07-02) [i486-linux]

vi /opt/metasploit/msf3/msfconsole
change #!/usr/bin/env ruby to #!/opt/metasploit/ruby/bin/ruby in the top of msfconsole.
msf &gt; db_connect msf3:4bfedfc2@localhost:7337/msf3dev
</code></pre>

<p>Now it will work fine and show you a lot of text output as Metasploit sets up all the necessary tables;</p>

<p>Enjoy it :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reinforcement php environment via php.ini]]></title>
    <link href="http://FightingMan.github.com/blog/2012/12/03/reinforcement-php-environment-via-php-dot-ini/"/>
    <updated>2012-12-03T10:59:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/12/03/reinforcement-php-environment-via-php-dot-ini</id>
    <content type="html"><![CDATA[<p>I&#8217;m reading &lt;White hat talk about security of Web> written by aullik5,found that some generic option can reinforcement php env via php.ini,now share it.</p>

<p>1.register_globals.</p>

<pre><code>register_globals = Off
Prevent from variables override.
</code></pre>

<p>2.open_basedir</p>

<pre><code>Limit the files that can be opened by PHP to the specified directory-tree, including the file itself.
When you want to restrict access to only the specified directory, end with a slash. For example: open_basedir = /dir/incl/,if not it will set as prefix.
</code></pre>

<p>3.allow_url_fopen &amp; allow_url_include</p>

<pre><code>allow_url_include = Off
allow_url_fopen = Off
</code></pre>

<p>4.display_errors &amp; log_errors</p>

<pre><code>display_errors = Off
log_errors = On
If u turn it on,will give enough information to the attacker.The best way just put them into logs.
</code></pre>

<!--more-->


<p>5.magic_quotes_gpc <a href="http://stackoverflow.com/questions/2610524/why-turning-magic-quotes-gpc-on-in-php-is-considered-a-bad-practice">more</a></p>

<pre><code>magic_quotes_gpc = Off
Many methods can bypass it.
</code></pre>

<p>6.cgi.fix_pathinfo <a href="https://nealpoole.com/blog/2011/04/setting-up-php-fastcgi-and-nginx-dont-trust-the-tutorials-check-your-configuration/">more</a></p>

<pre><code>cgi.fix_pathinfo = 0 
</code></pre>

<p>7.session.cookie_httponly &amp; session.cookie_secure</p>

<pre><code>session.cookie_httponly = true
Prevent cross site script,javascript can't get the cookie's value.
session.cookie_secure = true
if u use https pass through the site.
</code></pre>

<p>8.safe_mode &amp; disable_functions</p>

<pre><code>safe_mode = 0
disable_functions = "apache_child_terminate, apache_setenv, define_syslog_variables, escapeshellarg, escapeshellcmd, eval, exec, dl, fsocket, pfsockopen, fsockopen, fp, fput, ftp_connect, ftp_exec, ftp_get, ftp_login, ftp_nb_fput, ftp_put, ftp_raw, ftp_rawlist, highlight_file, ini_alter, ini_get_all, ini_restore, inject_code, mysql_pconnect, openlog, phpinfo, passthru, php_uname, phpAds_remoteInfo, phpAds_XmlRpc, phpAds_xmlrpcDecode, phpAds_xmlrpcEncode, popen, posix_getpwuid, posix_kill, posix_mkfifo, posix_setpgid, posix_setsid, posix_setuid, posix_setuid, posix_uname, proc_close, proc_get_status, proc_nice, proc_open, proc_terminate, shell_exec, syslog, system, system,proc_open, symlink, xmlrpc_entity_decode, popen, curl_exec, curl_multi_exec, parse_ini_file, show_source" and etc.
</code></pre>

<p>At last we must always take care of user&#8217;s input data and set correct right of web app dir.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Example of sharding cluster]]></title>
    <link href="http://FightingMan.github.com/blog/2012/12/01/example-of-sharding-cluster/"/>
    <updated>2012-12-01T19:45:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/12/01/example-of-sharding-cluster</id>
    <content type="html"><![CDATA[<p>Previous article showed some basic theories of Mongodb sharding,now we&#8217;ll demonstrate it.
Prepare 15 servers:172.16.103.200~172.16.103.214</p>

<p><img src="http://FightingMan.github.com/images/demo.jpeg"></p>

<p>Suppose you had been installed mongodb in /usr/local/mongdb and its structure:</p>

<pre><code>|-- GNU-AGPL-3.0
|-- README
|-- THIRD-PARTY-NOTICES
|-- bin
|   |-- bsondump
|   |-- mongo
|   |-- mongod
|   |-- mongodump
|   |-- mongoexport
|   |-- mongofiles
|   |-- mongoimport
|   |-- mongorestore
|   |-- mongos
|   |-- mongosniff
|   |-- mongostat
|   `-- mongotop
|-- db//Directory
|-- mongodb.conf
`-- mongodb.log
</code></pre>

<!--more-->


<p>1.Configuration servers.//200-202</p>

<pre><code>vi /usr/local/mongodb/mongodb.conf
fork = true
logpath = /usr/local/mongodb/mongodb.log
dbpath = /usr/local/mongodb/db/
logappend=true
journal=true
configsvr=true
/usr/local/mongdb/bin/mongod --config /usr/local/mongodb/mongodb.conf #start it
</code></pre>

<p>2.Mongos.//203-205</p>

<pre><code>vi /usr/local/mongodb/mongodb.conf
fork = true
logpath = /usr/local/mongodb/mongodb.log
logappend=true
configdb=172.16.103.200,172.16.103.201,172.16.103.202
/usr/local/mongdb/bin/mongos --config /usr/local/mongodb/mongodb.conf #start it
</code></pre>

<p>3.Shards.//206-214</p>

<pre><code>vi /usr/local/mongodb/mongodb.conf
fork = true
logpath = /usr/local/mongodb/mongodb.log
dbpath = /usr/local/mongodb/db/
logappend=true
journal=true
#206-208
replSet=sd1
#209-211
replSet=sd2
#212-214
replSet=sd3
/usr/local/mongdb/bin/mongod --config /usr/local/mongodb/mongodb.conf #start it
</code></pre>

<p>4.Replica Set.</p>

<pre><code>#connect to one of sd1's svr//default primary svr
&gt;/usr/local/mongodb/bin/mongo 127.0.0.1:27017/admin
&gt;config = {_id:"sd1",members:[
... {_id:0,host:'172.16.103.206:27017'},
... {_id:1,host:'172.16.103.207:27017'},
... {_id:2,host:'172.16.103.208:27017'}]
... }
&gt;rs.initiate(config);
#connect to one of sd2's svr//default primary svr
&gt;/usr/local/mongodb/bin/mongo 127.0.0.1:27017/admin
&gt;config = {_id:"sd2",members:[
... {_id:0,host:'172.16.103.209:27017'},
... {_id:1,host:'172.16.103.210:27017'},
... {_id:2,host:'172.16.103.211:27017'}]
... }
&gt;rs.initiate(config);
#connect to one of sd2's svr//default primary svr
&gt;/usr/local/mongodb/bin/mongo 127.0.0.1:27017/admin
&gt;config = {_id:"sd3",members:[
... {_id:0,host:'172.16.103.212:27017'},
... {_id:1,host:'172.16.103.213:27017'},
... {_id:2,host:'172.16.103.214:27017'}]
... }
&gt;rs.initiate(config);
</code></pre>

<p>5.Add shards.</p>

<pre><code>#connect to one mongos svr
/usr/local/mongodb/bin/mongo 127.0.0.1:27017/config
#set chunksize,default 64M
db.setting.save({_id:"chunksize",value:64})
#add shards,you can set the maxsize by yourself//default 2048M
use admin
db.runCommand({addshard:"sd1/172.16.103.206:27017,172.16.103.207:27017,172.16.103.208:27017",maxsize:20480})
db.runCommand({addshard:"sd2/172.16.103.209:27017,172.16.103.210:27017,172.16.103.211:27017",maxsize:20480})
db.runCommand({addshard:"sd3/172.16.103.212:27017,172.16.103.213:27017,172.16.103.214:27017",maxsize:20480})
#test comperation success
db.runCommand({listshards:1})#will list all the shards if successed.
#Active DB
db.runCommand({enablesharding:"mydemo"});
#set shard key for collection:user,before you do it , you can create some indexer for the key except unique indexer,if don't mongodb will create one for you automatically.
db.runCommand({shardcollection:"mydemo.user",key:{id:1,name:1}})
</code></pre>

<p>Now every thing have been done,enjoy it :)//Other way,you can test this demo with three svrs just change their default port.</p>

<p>Let&#8217;s talk about the shard key,the most important thing in my mind. <a href="http://docs.mongodb.org/manual/core/sharding/#shard-keys">Docs</a></p>

<p>Choose a good key make you get twice the result with half the effort.//from scaling mongodb.</p>

<p>A general formula //twitter-like.</p>

<pre><code>{coarseLocalityfield:1,searchfield:1}
</code></pre>

<p>Before we choose one,think about the answers to these questions:</p>

<pre><code>What do writes looks like? What is the shape and size of the documents you'er inserting?
How much data is the system writing per hour? Per day?And the peak?
What fields are random, and which ones are increasing?
what do reads look like? What data are people accessing?
How much data is the system reading per hour? Per day?And the peak?
Is the data indexed? Should it be indexed?
How much data is there,total?
</code></pre>

<p>Before you shard, you should get to know your data very well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A storiette]]></title>
    <link href="http://FightingMan.github.com/blog/2012/11/29/a-storiette/"/>
    <updated>2012-11-29T20:40:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/11/29/a-storiette</id>
    <content type="html"><![CDATA[<p>I like bananas,but you gave me a car of apples,then you were moved to tears by yourself and asked me why I&#8217;m not moved.</p>

<p>I have no words,then you told the world you have spent all your money to buy a car of apples for me,but I&#8217;m not moved any more,I must have a heart of stone and my character has a problem!</p>

<p>I just like banana&#8230;?!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Summary of Understanding Mongodb Sharding]]></title>
    <link href="http://FightingMan.github.com/blog/2012/11/28/summary-of-understanding-mongodb-sharding/"/>
    <updated>2012-11-28T22:16:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/11/28/summary-of-understanding-mongodb-sharding</id>
    <content type="html"><![CDATA[<p>Sharding is the method Mongodb uses to split a large collection across several servers(called a cluster).</p>

<p>A Mongodb cluster basically consists of three types of processes:the shards for actually storing data, the mongos processes for routing requests to the correct data,and the config servers,for keeping track of the cluster&#8217;s state.</p>

<p><img src="http://FightingMan.github.com/images/MongodbCluster.jpeg"></p>

<blockquote><ol>
<li>The Config Servers:
  Config servers hold the definitive information about the cluster for everyone&#8217;s access (shards,mongos processes, and system administrtors).</li>
<li>Mongos:
  Mongos is the interaction point  between users and the cluster..Its job is to hide all of the gooey internals of sharding  and present a clean, single-server interface to the user.Mongos can help you to use targeted query if you query involves the shard key.</li>
<li>Shards:
  A shard is one or more servers in a cluster that are responsible for some subset of the data(more than one server used for replica set usually).</li>
</ol>
</blockquote>

<!--more-->


<p>Shard key And Chunk</p>

<blockquote><p>The key you choose to use for chunk ranges is called a shard key(can be any field or combination of fields).e.g.</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Suppose our collection had documents that looked like this (_ids omitted):
</span><span class='line'>{"username" : "paul", "age" : 23}
</span><span class='line'>{"username" : "simon", "age" : 17}
</span><span class='line'>{"username" : "widdly", "age" : 16}
</span><span class='line'>{"username" : "scuds", "age" : 95}
</span><span class='line'>{"username" : "grill", "age" : 18}
</span><span class='line'>{"username" : "flavored", "age" : 55}
</span><span class='line'>{"username" : "bertango", "age" : 73}
</span><span class='line'>{"username" : "wooster", "age" : 33}
</span><span class='line'>If we choose the age field as a shard key and end up with a chunk range [15, 26),
</span><span class='line'>thechunk would contain the following documents:
</span><span class='line'>{"username" : "paul", "age" : 23}
</span><span class='line'>{"username" : "simon", "age" : 17}
</span><span class='line'>{"username" : "widdly", "age" : 16}
</span><span class='line'>{"username" : "grill", "age" : 18}</span></code></pre></td></tr></table></div></figure>


<p>When you first shard a collection , Mongodb creates a single chunk for whatever data is in the collection,and the has a range of (-∞,+∞),until you inserted more data,-∞ is the smallest value ,+∞ is the largest value.
If you insert enough data into the shards,Mongodb would split the initial chunk into two chunks around the midpoint.So,if approximately half of the documents had a an age field less than 15 and halst were greater than 15(above demo),Mongodb might choose 15 as th midpoint.Then we had two chunks:(-∞,15),[15,+∞).If we continued to insert data into the [15,+∞)chunk,it could be split again,so we have three chunks:(-∞,15),[15,midpoint),[midpoint,+∞).As we insert more data,Mongodb will continued to split existing chunks to create new chunks.
We also can hava a chunk with a single value,but every chunk&#8217;s range must be distincti.you cannot have overlapping chunks,each chunk&#8217;s range must exactly meet the next chunk&#8217;s range.e.g.</p>

<pre><code>if you split a chunk with the range[1,10),you can't have [1,5),[6,10);[1,5],[5,10);[1,5),[4,10).
keep in mind: each document must belong to one and only one chunk.
</code></pre>

<p>Also you can use different type for the documents,but can&#8217;t with empty values,Mongodb would sort it according to its type:</p>

<pre><code>null&lt;numbers&lt;strings&lt;objects&lt;arrays&lt;binary data&lt;ObjectIds&lt;booleans&lt;dates&lt;regular expressions
</code></pre>

<p>Balancer</p>

<blockquote><p>If there are multiple shards available,Mongodb will start migrating data to other shards once you have a sufficient number of chunks.This migration is called balancing and is perfomed bt a process called the balancer.
The balancer moves chunks from one shard to another automatically.
The goal of the balancer is not only to keep the data evenly distributed but also to minimize the amount of data transferred.</p></blockquote>

<p>Multi-range shards</p>

<blockquote><p>Allowing multiple,non-consesutive ranges in a shard allow us to pick and choose data and move it.</p></blockquote>

<p><img src="http://FightingMan.github.com/images/move1.jpeg"></p>

<blockquote><p>When a new shard is added,everyone can contribute data to it directly.</p></blockquote>

<p><img src="http://FightingMan.github.com/images/move2.jpeg"></p>

<blockquote><p>For a balancing round to occur, a shard must have at leat nine more chunks than the least-populous shard,so chunks will be migrated off of the crowed shard until it is even with the rest of the shards,because Mongodb wants to avoid sending the same data back and forth.Also keep in mind nine chunks is not even that much of an imbalance-it is less than 2GB of data,as Mongodb want minimize pointless data transfers.</p></blockquote>

<p><img src="http://FightingMan.github.com/images/avoid.jpeg"></p>

<p>Notice:In a real system, chunks are only 64MB by default,also you can change it in megabytes(db.settings.save( { _id:&#8221;chunksize&#8221;, value: <size>}))</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic syntax of inner class]]></title>
    <link href="http://FightingMan.github.com/blog/2012/11/27/basic-snytax-of-inner-class/"/>
    <updated>2012-11-27T23:02:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/11/27/basic-snytax-of-inner-class</id>
    <content type="html"><![CDATA[<p>Place a class definition within another class definition that is called an inner class.</p>

<figure class='code'><figcaption><span>Outer.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Outer</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;outer&#39;s f()&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">Inner</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Outer</span> <span class="nf">outer</span><span class="o">()</span> <span class="o">{</span> <span class="c1">//!cannot with static</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Outer</span><span class="o">.</span><span class="na">this</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Outer</span> <span class="nf">outer</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//!cannot with static</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">Outer</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;inner&#39;s f()&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">Inner</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Inner</span> <span class="nf">inner</span><span class="o">()</span> <span class="o">{</span> <span class="c1">//!cannot with static</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Inner</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->




<figure class='code'><figcaption><span>InnerClass.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InnerClass</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//! Outer.Inner in = new Inner();</span>
</span><span class='line'>        <span class="c1">//! Outer.Inner in = new Outer.Inner();</span>
</span><span class='line'>        <span class="n">Outer</span> <span class="n">outa</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Outer</span><span class="o">();</span>
</span><span class='line'>        <span class="n">outa</span><span class="o">.</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Outer</span><span class="o">.</span><span class="na">Inner</span> <span class="n">ina</span> <span class="o">=</span> <span class="n">outa</span><span class="o">.</span><span class="na">inner</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Outer</span><span class="o">.</span><span class="na">Inner</span> <span class="n">inb</span> <span class="o">=</span> <span class="n">outa</span><span class="o">.</span><span class="na">new</span> <span class="n">Inner</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ina</span><span class="o">.</span><span class="na">outer</span><span class="o">().</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>        <span class="n">inb</span><span class="o">.</span><span class="na">outer</span><span class="o">().</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ina</span><span class="o">.</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>        <span class="n">inb</span><span class="o">.</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Outer</span> <span class="n">outb</span> <span class="o">=</span> <span class="n">ina</span><span class="o">.</span><span class="na">outer</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Outer</span> <span class="n">outc</span> <span class="o">=</span> <span class="n">inb</span><span class="o">.</span><span class="na">outer</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">outb</span><span class="o">.</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>        <span class="n">outc</span><span class="o">.</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Outer</span><span class="o">.</span><span class="na">Inner</span> <span class="n">inc</span> <span class="o">=</span> <span class="n">outb</span><span class="o">.</span><span class="na">inner</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Outer</span><span class="o">.</span><span class="na">Inner</span> <span class="n">ind</span> <span class="o">=</span> <span class="n">outb</span><span class="o">.</span><span class="na">new</span> <span class="n">Inner</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Outer</span><span class="o">.</span><span class="na">Inner</span> <span class="n">ine</span> <span class="o">=</span> <span class="n">outc</span><span class="o">.</span><span class="na">inner</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Outer</span><span class="o">.</span><span class="na">Inner</span> <span class="n">inf</span> <span class="o">=</span> <span class="n">outc</span><span class="o">.</span><span class="na">new</span> <span class="n">Inner</span><span class="o">();</span>
</span><span class='line'>        <span class="n">inc</span><span class="o">.</span><span class="na">outer</span><span class="o">().</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ind</span><span class="o">.</span><span class="na">outer</span><span class="o">().</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>        <span class="n">inc</span><span class="o">.</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ind</span><span class="o">.</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ine</span><span class="o">.</span><span class="na">outer</span><span class="o">().</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>        <span class="n">inf</span><span class="o">.</span><span class="na">outer</span><span class="o">().</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ine</span><span class="o">.</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>        <span class="n">inf</span><span class="o">.</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span><span class="c1">//output:</span>
</span><span class='line'><span class="n">outer</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">f</span><span class="o">()</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="n">outer</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">f</span><span class="o">()</span>
</span><span class='line'><span class="n">outer</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">f</span><span class="o">()</span>
</span><span class='line'><span class="n">inner</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">f</span><span class="o">()</span>
</span><span class='line'><span class="n">inner</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">f</span><span class="o">()</span>
</span><span class='line'><span class="n">outer</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">f</span><span class="o">()</span>
</span><span class='line'><span class="n">outer</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">f</span><span class="o">()</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="n">outer</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">f</span><span class="o">()</span>
</span><span class='line'><span class="n">outer</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">f</span><span class="o">()</span>
</span><span class='line'><span class="n">inner</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">f</span><span class="o">()</span>
</span><span class='line'><span class="n">inner</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">f</span><span class="o">()</span>
</span><span class='line'><span class="n">outer</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">f</span><span class="o">()</span>
</span><span class='line'><span class="n">outer</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">f</span><span class="o">()</span>
</span><span class='line'><span class="n">inner</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">f</span><span class="o">()</span>
</span><span class='line'><span class="n">inner</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">f</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can make an object of the inner class anywhere except from within a no-static method of the outer class(if u don&#8217;t use .new). Inner class has access rights to all the elements in the enclosing class.
Notice: If you make a static inner class(called nested class), then it doesn&#8217;t need a reference to the outer-class object.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some params in php-fpm with dynamic pattern]]></title>
    <link href="http://FightingMan.github.com/blog/2012/11/26/some-params-in-php-fpm-with-dynamic-pattern/"/>
    <updated>2012-11-26T20:45:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/11/26/some-params-in-php-fpm-with-dynamic-pattern</id>
    <content type="html"><![CDATA[<p>When we set pm = dynamic in php-fpm.conf,there are some important params.</p>

<pre><code>1. pm.max_children:This value sets the limit on the number of simultaneous requests that will be served.
2. pm.start_servers: The number of child processes created on startup.
3. pm.min_spare_servers: The desired minimum number of idle server processes.
4. pm.max_spare_servers: The desired maximum number of idle server processes.
5. pm.max_requests:The number of requests each child process should execute before respawning.
</code></pre>

<blockquote><p>The first and the second is easy to understand,how about the 3rd-5th?</p></blockquote>

<p>The 3rd params which means: while forking full of subprocess arrive the 1st numbers,there also value of th 3rd sbprocess are idle.If pm.max_children was setted to 50,the highest number of concurrent request is limitted to (50 - the value of pm.min_spare_servers) in fact.</p>

<!--more-->


<p>The 4th params which means: With no request,the max subprocess is idle,after your concurrent arrived max_children,and the manager recovery of the subprocess till the values of pm.max_spare_servers.</p>

<p>The 5th params which means: AS its explanation said,if its value was too small,the edge of it is 1(0 representatives request unlimited),all subprocesses may occur to restart at the same time,this is a tragedy.While its value was too big,the stack may be overflowed.This params is very usefull in 3rd party libraries.</p>

<p>At last: the memory_limit in php.ini is very important,because it limitted the maximum memory that one php-fpm process  can be used.</p>

<p>Also there are other very important params,here I&#8217;m not listed all of them,the above parameters just with strong correlation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nesting interfaces]]></title>
    <link href="http://FightingMan.github.com/blog/2012/11/23/nesting-interfaces/"/>
    <updated>2012-11-23T01:27:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/11/23/nesting-interfaces</id>
    <content type="html"><![CDATA[<p>These features may seem like they are added strictly for syntactic consistency,maybe I will use it sometime :).
There are 5 Rules:</p>

<blockquote><ol>
<li>Nesting an interface within a class,these can have public package-access protected private visibility.</li>
<li>Nesting an interface within an interface they just have public or package-access visibility but all the elements must be public because an interface nested with another interface is automatically public(whether you specify it).</li>
<li>Nesting an interface within a class with any visibility,it can also be implemented any visibility.And if you implements a private interface with any visibility it can only be used as itself.It also means without allowing any upcasting.</li>
<li>The only thing that works is if the return value is handed to an object that has permission to use it.</li>
<li>When you implement an interface, you are not required to implemtns any interface nested within.</li>
</ol>
</blockquote>

<p>Let me show the codes:</p>

<!--more-->




<figure class='code'><figcaption><span>NestingInterfaces.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">interface</span> <span class="nc">B</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">f</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">BImp</span> <span class="kd">implements</span> <span class="n">B</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">BImp2</span> <span class="kd">implements</span> <span class="n">B</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">C</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">f</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">class</span> <span class="nc">CImp</span> <span class="kd">implements</span> <span class="n">C</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">CImp2</span> <span class="kd">implements</span> <span class="n">C</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">interface</span> <span class="nc">D</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">f</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">DImp</span> <span class="kd">implements</span> <span class="n">D</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">DImp2</span> <span class="kd">implements</span> <span class="n">D</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">D</span> <span class="nf">getD</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="k">new</span> <span class="n">DImp2</span><span class="o">();</span> <span class="o">}</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">D</span> <span class="n">dRef</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">receiveD</span><span class="o">(</span><span class="n">D</span> <span class="n">d</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">dRef</span> <span class="o">=</span> <span class="n">d</span><span class="o">;</span>
</span><span class='line'>        <span class="n">dRef</span><span class="o">.</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">E</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">interface</span> <span class="nc">G</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">f</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// Redundant &quot;public&quot;:</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">H</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">f</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">g</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">// Cannot be private within an interface:</span>
</span><span class='line'>    <span class="c1">//! private interface I {}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NestingInterfaces</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">BImp</span> <span class="kd">implements</span> <span class="n">A</span><span class="o">.</span><span class="na">B</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">class</span> <span class="nc">CImp</span> <span class="kd">implements</span> <span class="n">A</span><span class="o">.</span><span class="na">C</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// Cannot implement a private interface except</span>
</span><span class='line'>    <span class="c1">// within that interface’s defining class:</span>
</span><span class='line'>    <span class="c1">//! class DImp implements A.D {</span>
</span><span class='line'>    <span class="c1">//! public void f() {}</span>
</span><span class='line'>    <span class="c1">//! }</span>
</span><span class='line'>    <span class="kd">class</span> <span class="nc">EImp</span> <span class="kd">implements</span> <span class="n">E</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">g</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">class</span> <span class="nc">EGImp</span> <span class="kd">implements</span> <span class="n">E</span><span class="o">.</span><span class="na">G</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">class</span> <span class="nc">EImp2</span> <span class="kd">implements</span> <span class="n">E</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">g</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">class</span> <span class="nc">EG</span> <span class="kd">implements</span> <span class="n">E</span><span class="o">.</span><span class="na">G</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">A</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">A</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">// Can’t access A.D:</span>
</span><span class='line'>        <span class="c1">//! A.D ad = a.getD();</span>
</span><span class='line'>        <span class="c1">// Doesn’t return anything but A.D:</span>
</span><span class='line'>        <span class="c1">//! A.DImp2 di2 = a.getD();</span>
</span><span class='line'>        <span class="c1">// Cannot access a member of the interface:</span>
</span><span class='line'>        <span class="c1">//! a.getD().f();</span>
</span><span class='line'>        <span class="c1">// Only another A can do anything with getD():</span>
</span><span class='line'>        <span class="n">A</span> <span class="n">a2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">A</span><span class="o">();</span>
</span><span class='line'>        <span class="n">a2</span><span class="o">.</span><span class="na">receiveD</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">getD</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'> <span class="c1">///:~</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fields in interface]]></title>
    <link href="http://FightingMan.github.com/blog/2012/11/23/fields-in-interface/"/>
    <updated>2012-11-23T01:20:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/11/23/fields-in-interface</id>
    <content type="html"><![CDATA[<p>Fields in interface are automatically static and final,which means the interface is a convenient tool for creating groups of constant value.
Since the fields are static,they are initialized when the class is first loaded,which happens when any of the fields are accessed for the first time.The fields,of course,are not part of the interface.The values are stored in the static storage area for that interface.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strategy & Factory design pattern with interface]]></title>
    <link href="http://FightingMan.github.com/blog/2012/11/23/strategy-and-factory-design-patter-with-interface/"/>
    <updated>2012-11-23T00:39:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/11/23/strategy-and-factory-design-patter-with-interface</id>
    <content type="html"><![CDATA[<p>Strategy design pattern</p>

<blockquote><p>When you write a method that performs certain operations,and that method takes an interface which you also specify,then the others can use this method with any object,as long as their object conforms to the interface.</p></blockquote>

<figure class='code'><figcaption><span>RandomWords.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.nio.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RandomWords</span> <span class="kd">implements</span> <span class="n">Readable</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Random</span> <span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">(</span><span class="mi">47</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">char</span><span class="o">[]</span> <span class="n">capitals</span> <span class="o">=</span> <span class="s">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">char</span><span class="o">[]</span> <span class="n">lowers</span> <span class="o">=</span> <span class="s">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">char</span><span class="o">[]</span> <span class="n">vowels</span> <span class="o">=</span> <span class="s">&quot;aeiou&quot;</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">RandomWords</span><span class="o">(</span><span class="kt">int</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">count</span> <span class="o">=</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">read</span><span class="o">(</span><span class="n">CharBuffer</span> <span class="n">cb</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">count</span><span class="o">--</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="n">cb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">capitals</span><span class="o">[</span><span class="n">rand</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">capitals</span><span class="o">.</span><span class="na">length</span><span class="o">)]);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">cb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">lowers</span><span class="o">[</span><span class="n">rand</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">lowers</span><span class="o">.</span><span class="na">length</span><span class="o">)]);</span>
</span><span class='line'>            <span class="n">cb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">vowels</span><span class="o">[</span><span class="n">rand</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">vowels</span><span class="o">.</span><span class="na">length</span><span class="o">)]);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">cb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;|&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Scanner</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="n">RandomWords</span><span class="o">(</span><span class="mi">10</span><span class="o">));</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>Factory design pattern</p>

<blockquote><p>Instead of calling a constructor directly, you call a creation method on a factory object which produces an implementation of the interface-this way,in theory,your code is completely isolated from the implementation of the interface,thus making it possible to transparently swap one implementation for another.</p></blockquote>

<figure class='code'><figcaption><span>Decisions.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'><span class="kd">interface</span> <span class="nc">Decision</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">toss</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">DecisionFactory</span><span class="o">{</span>
</span><span class='line'>    <span class="n">Decision</span> <span class="nf">getDecision</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Coin</span> <span class="kd">implements</span> <span class="n">Decision</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">point</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">().</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">6</span><span class="o">)+</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">toss</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Coin point = &quot;</span> <span class="o">+</span> <span class="n">point</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">CoinFactory</span> <span class="kd">implements</span> <span class="n">DecisionFactory</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Decision</span> <span class="nf">getDecision</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Coin</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Dice</span> <span class="kd">implements</span> <span class="n">Decision</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">s</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;head&quot;</span><span class="o">,</span><span class="s">&quot;flower&quot;</span><span class="o">};</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">point</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">().</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">toss</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Dice point &quot;</span> <span class="o">+</span> <span class="n">s</span><span class="o">[</span><span class="n">point</span><span class="o">]);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">DiceFactory</span> <span class="kd">implements</span> <span class="n">DecisionFactory</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Decision</span> <span class="nf">getDecision</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Dice</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Decisions</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">doToss</span><span class="o">(</span><span class="n">DecisionFactory</span> <span class="n">factory</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Decision</span> <span class="n">d</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">getDecision</span><span class="o">();</span>
</span><span class='line'>        <span class="n">d</span><span class="o">.</span><span class="na">toss</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">doToss</span><span class="o">(</span><span class="k">new</span> <span class="n">CoinFactory</span><span class="o">());</span>
</span><span class='line'>        <span class="n">doToss</span><span class="o">(</span><span class="k">new</span> <span class="n">DiceFactory</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeigniter https defect]]></title>
    <link href="http://FightingMan.github.com/blog/2012/11/21/codeigniter-https-defect/"/>
    <updated>2012-11-21T17:05:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/11/21/codeigniter-https-defect</id>
    <content type="html"><![CDATA[<p>Today I&#8217;m test a small experiment with CI and nginx,I found that:if I use its form helper submit the data ,http protocol will jump to https protocol,then I read the source code found that:</p>

<figure class='code'><figcaption><span>Config.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">        ...</span>
</span><span class='line'><span class="x">      if ($this-&gt;config[&#39;base_url&#39;] == &#39;&#39;)</span>
</span><span class='line'><span class="x">      {</span>
</span><span class='line'><span class="x">          if (isset($_SERVER[&#39;HTTP_HOST&#39;]))</span>
</span><span class='line'><span class="x">          {</span>
</span><span class='line'><span class="x">              $base_url = isset($_SERVER[&#39;HTTPS&#39;]) &amp;&amp; strtolower($_SERVER[&#39;HTTPS&#39;]) !== &#39;off&#39; ? &#39;https&#39; : &#39;http&#39;;</span>
</span><span class='line'><span class="x">              $base_url .= &#39;://&#39;. $_SERVER[&#39;HTTP_HOST&#39;];</span>
</span><span class='line'><span class="x">              $base_url .= str_replace(basename($_SERVER[&#39;SCRIPT_NAME&#39;]), &#39;&#39;, $_SERVER[&#39;SCRIPT_NAME&#39;]);</span>
</span><span class='line'><span class="x">          }</span>
</span><span class='line'>
</span><span class='line'><span class="x">          else</span>
</span><span class='line'><span class="x">          {</span>
</span><span class='line'><span class="x">              $base_url = &#39;http://localhost/&#39;;</span>
</span><span class='line'><span class="x">          }</span>
</span><span class='line'>
</span><span class='line'><span class="x">          $this-&gt;set_item(&#39;base_url&#39;, $base_url);</span>
</span><span class='line'><span class="x">      }</span>
</span><span class='line'><span class="x">        ...</span>
</span><span class='line'><span class="x">    </span>
</span></code></pre></td></tr></table></div></figure>


<p>Which means if you forget to set the value of base_url in config.php, CI will set it automatic,and if you use nginx and install the ssl module,the $_SERVER[&#8216;HTTPS&#8217;] has been setted,it will be an empty string if you don&#8217;t use it.
TO solve it, you must set value of base_url in config.php</p>

<figure class='code'><figcaption><span>config.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">        $_SERVER[&#39;HTTPS&#39;] = &#39;off&#39;;// if u don&#39;t use https,or set the base_url $config[&#39;base_url&#39;]   = &#39;http://yoursite&#39;;</span>
</span><span class='line'><span class="x">    </span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Name collisions when combining]]></title>
    <link href="http://FightingMan.github.com/blog/2012/11/14/name-collisions-when-combining/"/>
    <updated>2012-11-14T21:16:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/11/14/name-collisions-when-combining</id>
    <content type="html"><![CDATA[

<figure class='code'><figcaption><span>Pitfall.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">I1</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">f</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">I2</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">f</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">I3</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">f</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">C</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">C2</span> <span class="kd">implements</span> <span class="n">I1</span><span class="o">,</span> <span class="n">I2</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">f</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">C3</span> <span class="kd">extends</span> <span class="n">C</span> <span class="kd">implements</span> <span class="n">I2</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">f</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">C4</span> <span class="kd">extends</span> <span class="n">C</span> <span class="kd">implements</span> <span class="n">I3</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**error:</span>
</span><span class='line'><span class="cm">*class C5 extends C implements I1 {}</span>
</span><span class='line'><span class="cm">*class I4 extends I1,I3 {}</span>
</span><span class='line'><span class="cm">*class C6 extends I2,I3 {} </span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think there are three rules at least:</p>

<blockquote><ol>
<li>Methods differ isn&#8217;t only by return type.</li>
<li>When a derived class do inherit from a class with implements interface,if the method have a method with same name,these methods must have same return type.</li>
<li>When a class implements interfaces,the methods which have same name must have its own return type and method signature.</li>
</ol>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Complete decoupling &amp; Multiple inheritance &amp; Extending interface]]></title>
    <link href="http://FightingMan.github.com/blog/2012/11/14/decoupling-and-multiple-inheritance-and-extending-interface/"/>
    <updated>2012-11-14T20:49:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/11/14/decoupling-and-multiple-inheritance-and-extending-interface</id>
    <content type="html"><![CDATA[<p>Complete decoupling.</p>

<blockquote><p>Whenever a method works with a class instead of an interface, you are limited to using that class or its subclass. If you would like to apply the method to a class that isn&#8217;t in that hierarchy,you&#8217;er out of luck.An interface relaxes this constraint considerably.As a result it allows you to write more reusable code.</p></blockquote>

<p>Multiple inheritance.</p>

<blockquote><p>Because an interface has no implementation at all&#8211;that is,there is no storage associated with an interface&#8211;there&#8217;s nothing to prevent many interfaces from being combined.You can do inherit from a non-interface use extends keyword and implements interface as many as you want use implements keyword and separate them with commas. And then the derived class can upcast to anyone of them.</p>

<pre><code>class a extends b implements c,d,e,f{}
</code></pre></blockquote>

<p>Extending an interface with inderitance.</p>

<blockquote><p>You can combine several interfaces into a new interface with inheritance.</p></blockquote>

<figure class='code'><figcaption><span>Demo.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="kd">interface</span> <span class="nc">A</span> <span class="o">{}</span>
</span><span class='line'>        <span class="kd">interface</span> <span class="nc">B</span> <span class="o">{}</span>
</span><span class='line'>        <span class="kd">interface</span> <span class="nc">C</span> <span class="o">{}</span>
</span><span class='line'>        <span class="kd">interface</span> <span class="nc">D</span> <span class="kd">extends</span> <span class="n">A</span><span class="o">,</span><span class="n">B</span><span class="o">,</span><span class="n">C</span><span class="o">{}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abstract class &amp; pure interface]]></title>
    <link href="http://FightingMan.github.com/blog/2012/11/13/abstract-class-and-pure-interface/"/>
    <updated>2012-11-13T01:04:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/11/13/abstract-class-and-pure-interface</id>
    <content type="html"><![CDATA[<p>Interface and abstract class provide more structured way to seprate interface from implemention.Java support this mechanisms directly.</p>

<p>Abstract class and methods.</p>

<blockquote><p>A method that is incomplete; it has only a declaration and no method body.</p>

<pre><code>abstract void foo();
</code></pre>

<p>A class contains abstract methods is called abstract class.</p>

<pre><code>abstract class bar{}
</code></pre>

<p>If you inherit from an abstract class and you want to make objects of new type, you must provide method definitions for all the abstract methods in the base class. If you don&#8217;t, then the derived class is also abstract, so you can&#8217;t new the abstract class,or make object of it.</p>

<p>An abstract class is a class either,so you can use extends keyword.</p></blockquote>

<!--more-->


<p>Interface.</p>

<blockquote><p>The interface keyword just take the concept of abstractness one stp further which means the interface keyword produces a completely abstract class, ont that provides no implementation at all.it allows the creator to determine method names, argument lists, and return types, but no method bodies.The fiedls in it will be implicitly with static and final.</p>

<p>You can choose to explicitly declare the method in an interface as public, but they are public even if you don&#8217;t say it.So when you implement an interface, the methods from interface must be defined as public which means you can&#8217;t use other keywords or give it package access in the implementation.</p>

<pre><code>interface bar{}
</code></pre>

<p>If you want to implement it.You just allowed to use implements keyword.</p>

<pre><code>class foo implements bar{} //Note: you must implements all the methods in the interface:bar,also this class can be abstract.
</code></pre></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polymorphism two]]></title>
    <link href="http://FightingMan.github.com/blog/2012/11/04/polymorphism-two/"/>
    <updated>2012-11-04T21:08:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/11/04/polymorphism-two</id>
    <content type="html"><![CDATA[<p>Covariant return types</p>

<blockquote><p>An overridden method in a derived class can return a type derived from the type returned by the base class method.</p></blockquote>

<figure class='code'><figcaption><span>CovariantReturn.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="kd">class</span> <span class="nc">Grain</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="s">&quot;Grain&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">class</span> <span class="nc">Wheat</span> <span class="kd">extends</span> <span class="nf">Grain</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="s">&quot;Wheat&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">class</span> <span class="nc">Mill</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Grain</span> <span class="nf">process</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">new</span> <span class="nf">Grain</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">class</span> <span class="nc">WheatMill</span> <span class="kd">extends</span> <span class="n">Mill</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Wheat</span> <span class="nf">process</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">new</span> <span class="nf">Wheat</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">class</span> <span class="nc">CovariantReturn</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Mill</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Mill</span><span class="o">();</span>
</span><span class='line'>                <span class="n">Grain</span> <span class="n">g</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">process</span><span class="o">();</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">g</span><span class="o">);</span>
</span><span class='line'>                <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WheatMill</span><span class="o">();</span>
</span><span class='line'>                <span class="n">g</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">process</span><span class="o">;</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">g</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span><span class="c1">//output:</span>
</span><span class='line'>        <span class="n">Grain</span>
</span><span class='line'>        <span class="n">Wheat</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>Designing with inheritance</p>

<p>1.The better approach is to choose composition first,when it&#8217;s not obvious which one you should use,composition is also more flexible since it&#8217;s possible to dynamically choose a type. A general guideline is: Use inheritance to express diffeences in behavior, and fields to express variations in state, this is also called the State Pattern.</p>

<p>2.Substitution vs. extension</p>

<pre><code>"Is-a" relationship: the interface of a class establishes what it is, inheritance guarantees that any derived class will have the interface of the base class and nothing less.
"Is-like-a" relationship: the derived class is like the base class it has the same fundamental interface but it has other features that require additional methods to implement.
</code></pre>

<p>3.Downcasting and runtime type information</p>

<blockquote><p>When we design with is-like-a and via an upcast,we must lose the specific type information.The solution is downcast, in java every cast is checked! so even though it looks you&#8217;re just performing an ordinary parenthesized cast, at run time this cast is checked to ensure that it is in fast the type you think it is.</p></blockquote>

<figure class='code'><figcaption><span>Downcast.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="kd">class</span> <span class="nc">sup</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">class</span> <span class="nc">sub</span> <span class="kd">extends</span> <span class="n">sup</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">only</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">class</span> <span class="nf">Downcast</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">sup</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">sub</span><span class="o">();</span>
</span><span class='line'>                <span class="c1">//!s.only() compile time : method not found in sup;</span>
</span><span class='line'>                <span class="o">((</span><span class="n">sub</span><span class="o">)</span><span class="n">s</span><span class="o">).</span><span class="na">only</span><span class="o">();</span><span class="c1">// Downcast/runtime type information.</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polymorphism one]]></title>
    <link href="http://FightingMan.github.com/blog/2012/10/31/polymorphism-one/"/>
    <updated>2012-10-31T21:19:00+08:00</updated>
    <id>http://FightingMan.github.com/blog/2012/10/31/polymorphism-one</id>
    <content type="html"><![CDATA[<p>Polymorphism always perform the right behavior because of late-binding,as the last posts say.</p>

<p>Polymorphism also havs better extensibility,if a class inherited the base class,and another class has a method(the param&#8217;s type is base class),now you can add any more derived class from
the bass class without change the third class&#8217;s method.</p>

<p>Pitfall:</p>

<p>a. If the derived class override the private method which in the base class,and call the method with upcasting to the base class ,unexpected the method will be called in the base class.</p>

<figure class='code'><figcaption><span>pitfallOne.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="kd">public</span> <span class="kd">class</span> <span class="nc">pitfallOne</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">private</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;sup&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">pitfallOne</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">sub</span><span class="o">();</span>
</span><span class='line'>                <span class="n">p</span><span class="o">.</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">class</span> <span class="nc">sub</span> <span class="kd">extends</span> <span class="n">pitfallOne</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;sub&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span><span class="c1">//output:sup;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p> b. If you access a field directly, the access will be resolved at compile-time,won&#8217;t happen polymorphically.</p>

<!--more-->




<figure class='code'><figcaption><span>pitfallTwo.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="kd">class</span> <span class="nc">sup</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">24</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">class</span> <span class="nc">sub</span> <span class="kd">extends</span> <span class="n">sup</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">class</span> <span class="nc">pitfallTwo</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">sup</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">sub</span><span class="o">();</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">age</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span><span class="c1">//output:24;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p> c. If a method is static, it doesn&#8217;t behave polymorphically,because static methods associated with the class, and not the individual objects.</p>

<figure class='code'><figcaption><span>pitfallThree.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>        <span class="kd">class</span> <span class="nc">sup</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">static</span> <span class="kt">void</span> <span class="nf">staticGet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;super static method&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">class</span> <span class="nc">sub</span> <span class="kd">extends</span> <span class="n">sup</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">static</span> <span class="kt">void</span> <span class="nf">staticGet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;sub static method&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">class</span> <span class="nc">pitfallThree</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">sup</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">sub</span><span class="o">();</span>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="na">staticGet</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span><span class="c1">//output: super static method.</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p> As we know that a constructor for the base class is always called during the construction process for a derived class,chaining up the inhreitance hierarchy. And if we
do have cleanup issues,the order of cleanup should be the reverse of the order of initialization,in case one subobjects depends on another.</p>

<p>If you call a dynamically-bound method inside a constructor,the effect of this call can be rather unexpected because the overridden method will be called before the object is fully
constructed.</p>

<figure class='code'><figcaption><span>PolyConstructors.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Glyph</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">draw</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="s">&quot;Glyph.draw()&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">Glyph</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="s">&quot;Glyph() before draw()&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">draw</span><span class="o">();</span>
</span><span class='line'>        <span class="n">print</span><span class="o">(</span><span class="s">&quot;Glyph() after draw()&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">RoundGlyph</span> <span class="kd">extends</span> <span class="n">Glyph</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">radius</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="n">RoundGlyph</span><span class="o">(</span><span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">radius</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RoundGlyph.RoundGlyph(), radius = &quot;</span> <span class="o">+</span> <span class="n">radius</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">draw</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;RoundGlyph.draw(), radius = &quot;</span> <span class="o">+</span> <span class="n">radius</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PolyConstructors</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">RoundGlyph</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span><span class="c1">//output:</span>
</span><span class='line'><span class="n">Glyph</span><span class="o">()</span> <span class="n">before</span> <span class="n">draw</span><span class="o">()</span>
</span><span class='line'><span class="n">RoundGlyph</span><span class="o">.</span><span class="na">draw</span><span class="o">(),</span> <span class="n">radius</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">Glyph</span><span class="o">()</span> <span class="n">after</span> <span class="n">draw</span><span class="o">()</span>
</span><span class='line'><span class="n">RoundGlyph</span><span class="o">.</span><span class="na">RoundGlyph</span><span class="o">(),</span> <span class="n">radius</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>At first we must know the actual process initialization:</p>

<pre><code>1 The storage allocated for the object is initialized to binary zero before anything else
happens.
2 The base-class constructors are called as described previously. At this point, the
overridden draw( ) method is called (yes, before the RoundGlyph constructor is
called), which discovers a radius value of zero(base on the its type), due to Step 1.
3 Member initializers are called in the order of declaration.
4 The body of the derived-class constructor is called.
</code></pre>

<p>I can think a benefit of this design: if we have app which use google searching interface and have been compilied,and now your leader told you that we must changed to yahoo searching interface, and we don&#8217;t need to change the code also without recompiled it,we just adjust the yahoo interface.</p>
]]></content>
  </entry>
  
</feed>
